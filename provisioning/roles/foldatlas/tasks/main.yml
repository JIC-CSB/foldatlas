---
#
# Install and configure foldatlas.
#

- stat:
    path: "{{ foldatlas_sql_dir }}"
  register: src_dir

- name: create data directory
  file:
    path: "{{ foldatlas_sql_dir }}"
    mode: 0755
    state: directory
    recurse: yes
    force: no
  when: src_dir.stat.exists == False

#
# --- Download data ---
#

#- name: download the annotation data
#  get_url: url={{ annotation_root_url }}/{{ item }}
#           dest={{ annotation_home }}
#  with_items: "{{ annotation_files }}"

#- name: download reference genome
#  get_url: url={{ reference_root_url }}/{{ item }}
#           dest={{ reference_home }}
#  with_items: "{{ reference_fasta_files }}"

#- name: download fasta of other strains
#  get_url: url={{ item }} dest={{ strains_home }}
#  with_items:
#    - "{{ strains_url }}{{ strains_fasta }}"

#- name: download and decompress GFF
#  unarchive: src={{ item }} dest={{ gff_home }}
#  with_items:
#    - "{{ gff_url }}{{ gff }}"

#
# --- Configure DB ---
#

- name: create mysql account for foldatlas
  mysql_user:
    name: "{{ foldatlas_db_user }}"
    password: "{{ foldatlas_db_pass }}"
    priv: '*.*:ALL'
    login_user: 'root'
    login_password: "{{ mysql_root_password }}"
    state: present

- name: Set root user password
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    user: root
    password: "{{ new_mysql_root_password }}"
    check_implicit_admin: yes
    state: present
  when:
    change_mysql_root == "yes"

- name: increase max_allowed_packet to allow for huge chromosome DNA strings
  mysql_variables:
    variable: "max_allowed_packet"
    value: 1073741824
    login_user: "{{ foldatlas_db_user }}"
    login_password: "{{ foldatlas_db_pass }}"

#- name: add the SQL schema to the SQL dir
#  synchronize: src={{ foldatlas_schema_sql }}
#        dest={{ foldatlas_sql_dir }}

#- name: load foldatlas schema
#  mysql_db: name={{ foldatlas_db }}
#            state=import
#            target="{{ foldatlas_sql_dir }}/{{ foldatlas_schema_sql }}"

#
# --- Setup directories
#

- name: create downloads directory for foldatlas
  file:
    path: "{{ foldatlas_downloads_dir }}"
    state: directory
    mode: 0755
    recurse: yes

#
# --- Populate DB ---
#
#

# HW commented this out due to provisioning problems
#
#- name: download and unarchive SQL dump
#  unarchive:
#    src: "{{ foldatlas_sql_dump_url }}"
#    dest: "{{ foldatlas_sql_dir }}"
#    creates: "{{ foldatlas_downloads_dir }}/{{ foldatlas_sql }}"
#    remote_src: yes
#  when:
#    foldatlas_load_sql_dump == "yes"
#
#- stat:
#    path: "{{ foldatlas_sql_dir }}/{{ foldatlas_sql }}.gz"
#  register: sql_gz
#
#- name: rearchive SQL dump without the tar
#  archive:
#    path: "{{ foldatlas_sql_dir }}/{{ foldatlas_sql }}"
#  when: sql_gz.stat.exists == False
#
#- name: create symlink to gzipped SQL dump
#  file:
#    src: "{{ foldatlas_sql_dir }}/{{ foldatlas_sql }}.gz"
#    dest: "{{ foldatlas_downloads_dir }}/{{ foldatlas_sql }}.gz"
#    state: link
#
#- name: load SQL dump
#  mysql_db:
#    name={{ foldatlas_db }}
#    state=import
#    target="{{ foldatlas_sql_dir }}/{{ foldatlas_sql }}"
#    login_user="{{ foldatlas_db_user }}"
#    login_password="{{ foldatlas_db_pass }}"
#  when:
#    foldatlas_load_sql_dump == "yes"

#
# --- Add Web Content ---
#

- name: ensure that /var/www/static exists
  file:
    path: /var/www/static
    state: directory

- name: copy over static files for website
  synchronize:
    src: "{{ role_path }}/files/static/"
    dest: "/var/www/static/"

- name: ensure that /var/www/foldatlas exists
  file:
    path: /var/www/foldatlas
    state: directory

- name: copy over foldatlas flask files for website
  synchronize:
    src: "{{ role_path }}/files/foldatlas/"
    dest: "/var/www/foldatlas/"

- name: ensure that /var/www/bpps exists
  file:
    path: /var/www/bpps
    state: directory
  notify: restart apache


# useful when only doing the foldatlas part of the provisioning
- name: restart apache
  service:
    name: httpd
    state: restarted

